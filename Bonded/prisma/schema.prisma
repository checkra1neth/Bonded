generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PortfolioVisibilityLevel {
  HIDDEN
  SUMMARY
  DETAILED
}

enum ActivityVisibilityLevel {
  HIDDEN
  TIMEZONE_ONLY
  PATTERNS
}

enum CompatibilityCategory {
  CRYPTO_SOULMATES
  DEFI_COMPATIBLE
  POTENTIAL_MATCH
  DIFFERENT_STRATEGIES
}

enum ConversationRole {
  SEEKER
  CANDIDATE
  SYSTEM
}

enum ChallengeDifficultyLevel {
  STARTER
  INTERMEDIATE
  ADVANCED
}

enum ChallengeTaskType {
  DEFI
  NFT
  SOCIAL
  EDUCATION
  ONCHAIN_ACTION
}

enum ChallengeTaskTargetKind {
  ACTIONS
  STREAK
  COLLABORATION
}

enum ChallengeTaskCategory {
  SOLO
  TEAM
}

enum EventType {
  DEFI_STUDY_GROUP
  NFT_GALLERY_WALK
  MARKET_BRIEFING
  COMMUNITY_BUIDL
  RETROACTIVE_REVIEW
}

enum EventFormat {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum EventAttendanceStatus {
  INVITED
  CONFIRMED
  WAITLISTED
  CHECKED_IN
}

enum BadgeRarity {
  CORE
  ELITE
  LEGENDARY
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  fid           Int?
  ensName       String?
  basename      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  portfolio             Portfolio?
  compatibilityAnalyses CompatibilityAnalysis[] @relation("AnalysisOwner")
  compatibilityResults  CompatibilityAnalysis[] @relation("AnalysisTarget")
  conversations         ConversationParticipant[]
}

model Portfolio {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  snapshot   Json
  highlights String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  privacy  PortfolioPrivacy?
  analyses CompatibilityAnalysis[] @relation("AnalysisPortfolio")
}

model PortfolioPrivacy {
  id                 String                   @id @default(cuid())
  portfolio          Portfolio                @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId        String                   @unique
  shareTokens        Boolean                  @default(true)
  shareDefi          Boolean                  @default(true)
  shareNfts          Boolean                  @default(true)
  shareActivity      Boolean                  @default(true)
  shareHighlights    Boolean                  @default(true)
  tokenVisibility    PortfolioVisibilityLevel @default(SUMMARY)
  defiVisibility     PortfolioVisibilityLevel @default(SUMMARY)
  nftVisibility      PortfolioVisibilityLevel @default(SUMMARY)
  activityVisibility ActivityVisibilityLevel  @default(PATTERNS)
  viewerFids         Int[]
  viewerAddresses    String[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

model CompatibilityAnalysis {
  id              String                @id @default(cuid())
  owner           User                  @relation("AnalysisOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  target          User?                 @relation("AnalysisTarget", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetUserId    String?
  portfolio       Portfolio             @relation("AnalysisPortfolio", fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId     String
  snapshot        Json
  sharedInterests Json
  reasoning       Json
  overallScore    Float
  tokenScore      Float
  defiScore       Float
  nftScore        Float
  activityScore   Float
  category        CompatibilityCategory
  highlights      String[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([ownerId], map: "CompatibilityAnalysis_ownerId_idx")
  @@index([targetUserId], map: "CompatibilityAnalysis_targetUserId_idx")
  @@index([portfolioId], map: "CompatibilityAnalysis_portfolioId_idx")
}

model Conversation {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastMessageAt  DateTime?

  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String           @id @default(cuid())
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           ConversationRole @default(SEEKER)
  joinedAt       DateTime         @default(now())
  lastReadAt     DateTime?
  isTyping       Boolean          @default(false)

  messages Message[]

  @@unique([conversationId, userId])
  @@index([conversationId], map: "ConversationParticipant_conversationId_idx")
  @@index([userId], map: "ConversationParticipant_userId_idx")
}

model Message {
  id             String                @id @default(cuid())
  conversation   Conversation          @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         ConversationParticipant @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  body           String
  status         MessageDeliveryStatus @default(SENT)
  deliveredAt    DateTime?
  readAt         DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([conversationId], map: "Message_conversationId_idx")
  @@index([senderId], map: "Message_senderId_idx")
}

model Challenge {
  id                 String                      @id @default(cuid())
  slug               String                      @unique
  title              String
  theme              String
  summary            String
  difficulty         ChallengeDifficultyLevel    @default(INTERMEDIATE)
  focusAreas         String[]
  trendingNarratives String[]
  featuredProtocols  String[]
  communitySpotlight String
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt

  tasks          ChallengeTask[]
  participations ChallengeParticipation[]
  events         CommunityEvent[]
  badgeAwards    ChallengeBadgeAward[]
}

model ChallengeTask {
  id                  String                  @id @default(cuid())
  challenge           Challenge               @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId         String
  title               String
  summary             String
  type                ChallengeTaskType
  focusAreas          String[]
  points              Int
  category            ChallengeTaskCategory
  targetKind          ChallengeTaskTargetKind
  targetGoal          Int
  cadence             String?
  minimumCollaborators Int?
  verificationMethod  String
  verificationDetail  String
  bonusDescription    String?
  bonusPoints         Int?
  createdAt           DateTime @default(now())

  @@index([challengeId], map: "ChallengeTask_challengeId_idx")
}

model ChallengeParticipation {
  id               String           @id @default(cuid())
  challenge        Challenge        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId      String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  xp               Int              @default(0)
  streak           Int              @default(0)
  completedTaskIds String[]
  badges           String[]
  progress         Json
  lastSubmissionAt DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  attendances CommunityEventAttendance[]
  connectionsA EventConnection[]         @relation("ConnectionParticipantA")
  connectionsB EventConnection[]         @relation("ConnectionParticipantB")

  @@index([challengeId], map: "ChallengeParticipation_challengeId_idx")
  @@index([userId], map: "ChallengeParticipation_userId_idx")
}

model ChallengeBadge {
  id          String       @id @default(cuid())
  slug        String       @unique
  title       String
  description String
  rarity      BadgeRarity  @default(CORE)
  icon        String?
  criteria    String
  createdAt   DateTime     @default(now())

  awards ChallengeBadgeAward[]
}

model ChallengeBadgeAward {
  id               String                 @id @default(cuid())
  badge            ChallengeBadge        @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId          String
  challenge        Challenge             @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId      String
  participation    ChallengeParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  participationId  String
  reason           String
  awardedAt        DateTime              @default(now())

  @@index([challengeId], map: "ChallengeBadgeAward_challengeId_idx")
  @@index([participationId], map: "ChallengeBadgeAward_participationId_idx")
}

model CommunityEvent {
  id                String            @id @default(cuid())
  challenge         Challenge         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId       String
  title             String
  description       String
  type              EventType
  format            EventFormat
  focusAreas        String[]
  startTime         DateTime
  endTime           DateTime
  host              String
  location          String
  capacity          Int
  vibe              String?
  resources         String[]
  agenda            Json
  recommendedRoles  String[]
  createdAt         DateTime          @default(now())

  attendances CommunityEventAttendance[]
  connections EventConnection[]

  @@index([challengeId], map: "CommunityEvent_challengeId_idx")
  @@index([type], map: "CommunityEvent_type_idx")
}

model CommunityEventAttendance {
  id              String                 @id @default(cuid())
  event           CommunityEvent         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  participation   ChallengeParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  participationId String
  status          EventAttendanceStatus  @default(INVITED)
  joinedAt        DateTime               @default(now())
  notes           String?

  @@index([eventId], map: "CommunityEventAttendance_eventId_idx")
  @@index([participationId], map: "CommunityEventAttendance_participationId_idx")
}

model EventConnection {
  id               String                 @id @default(cuid())
  event            CommunityEvent         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String
  participantA     ChallengeParticipation @relation("ConnectionParticipantA", fields: [participantAId], references: [id], onDelete: Cascade)
  participantAId   String
  participantB     ChallengeParticipation @relation("ConnectionParticipantB", fields: [participantBId], references: [id], onDelete: Cascade)
  participantBId   String
  synergyScore     Float
  reason           String
  highlight        String?
  createdAt        DateTime @default(now())

  @@index([eventId], map: "EventConnection_eventId_idx")
}
